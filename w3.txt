Script started on Mon 08 Feb 2016 11:08:44 PM EST
pqu1@matrix:~/oop345/w3> whoami
pqu1
pqu1@matrix:~/oop345/w3> cat w3.cpp Text.h Text.cpp 
// Workshop 3 - Copy and Move Semantics
 // w3.cpp

 #include <iostream>
 #include <iomanip>
 #include <utility>
 #include <ctime>
 #include "Text.h"
 #define TIME(start, end) double((end) - (start)) / CLOCKS_PER_SEC

 int main (int argc, char* argv[]) {
	 //gutenberg_shakespeare.txt
     if (argc == 1) {
         std::cerr << argv[0] << ": missing file operand\n";
         return 1;
     }
     else if (argc != 2) {
         std::cerr << argv[0] << ": too many arguments\n";
         return 2;
     }
     std::clock_t cs, ce;
     {
         std::cout << std::fixed << std::setprecision(3);
         cs = std::clock();
         w3::Text a;
         ce = std::clock();
         std::cout << "Constructor      " << TIME(cs, ce) << " seconds"; 
         std::cout << " - a.size = " << a.size() << std::endl;

         cs = std::clock();
         w3::Text b(argv[1]);
         ce = std::clock();
         std::cout << "Constructor      " << TIME(cs, ce) << " seconds";
         std::cout << " - b.size = " << b.size() << std::endl;

         cs = std::clock();
         a = b;
         ce = std::clock();
         std::cout << "Copy Assignment  " << TIME(cs, ce) << " seconds";
         std::cout << " - a.size = " << a.size() << std::endl;

         cs = std::clock();
         a = std::move(b);
         ce = std::clock();
         std::cout << "Move Assignment  " << TIME(cs, ce) << " seconds";
         std::cout << " - a.size = " << a.size() << std::endl;

         cs = std::clock();
         w3::Text c = a;
         ce = std::clock();
         std::cout << "Copy Constructor " << TIME(cs, ce) << " seconds";
         std::cout << " - c.size = " << c.size() << std::endl;

         cs = std::clock();
         w3::Text d = std::move(a);
         ce = std::clock();
         std::cout << "Move Constructor " << TIME(cs, ce) << " seconds";
         std::cout << " - d.size = " << d.size() << std::endl;

         cs = std::clock();
     }
     ce = std::clock();
     std::cout << "Destructor       " << TIME(cs, ce) << " seconds\n";
 }#pragma once

#include <iostream>
#include <fstream>
#include <cstring>

using namespace std;

namespace w3{
	
	class Text 
	{
		string *data;
		size_t numberOfLine;
	public:		
		Text();		//constructor
		Text(const char*);
		~Text();	//destructor
		Text& operator=(const Text&);	//copy assignment 
		Text&& operator=(Text&&);		//move assignment
		Text(const Text&);		//copy constructor
		Text(Text&&);			//move constructor
		size_t size() const;			//number of records of text data
		void print();

	
	
	};
}
#include <fstream>
#include <iostream>
#include <string>
#include "Text.h"

using namespace std;

namespace w3 {

	Text::Text() //constructor
	{
		numberOfLine=0;
		data=nullptr;
//		cout<<"Text constructor()\n";
	}	
	
	Text::Text(const char* filename)
	{
		string s;
		numberOfLine=0;
		fstream fin(filename);
		if (fin.is_open())
		{
			while (fin.good())
			{
				getline(fin,s);
				numberOfLine++;
			}
			fin.clear();
//			cout <<" file "<<filename<<" contains "<< numberOfLine<<" lines\n";
			data=new string [numberOfLine];
//			fin.seekp(0,ios::beg);
			fin.seekg(0);


			for (size_t i =0;i<numberOfLine;i++)
			{
				 getline(fin,data[i]);
	//			cout << "Read from file: " << data[i] << endl;
			}
			fin.close();
		}
		else
		{
			cerr<<"Can not open file "<<filename<<"\n";
		}
	}
	Text::~Text()	//destructor
	{
//		cout<<"Text destructor, size="<<numberOfLine<<"\n";
/*		if (data) 
		{
			delete [] data;
			data=nullptr;
//			numberOfLine=0;
		}
*/	}
	Text& Text::operator=(const Text& rhs)	//copy assignment 
	{
//		cout<<"assignment operator size, rhs.size="<<numberOfLine<<","<<rhs.numberOfLine<<"\n";
		if (this != &rhs)
		{
			if (data)
			{
				delete [] data;
				data=nullptr;
				numberOfLine=0;
			}

			if (rhs.data)
			{
				numberOfLine=rhs.numberOfLine;
				data=new string[numberOfLine];
				memcpy(data,rhs.data,numberOfLine*sizeof(Text));
			}
		}
		else
		{
			cout<<"assignment operator called on itself\n";
		}
		return *this;	
	}

	Text&& Text::operator=(Text&& rhs)		//move assignment
	{
//		cout<<"move assignment operator size, rhs.size="<<numberOfLine<<","<<rhs.numberOfLine<<"\n";
		if (this!=&rhs)
		{
			if (data)
			{
				delete [] data;
				data=nullptr;
			}
			numberOfLine=rhs.numberOfLine;
			data=rhs.data;

			rhs.data=nullptr;
			rhs.numberOfLine=0;
		}
		else
		{ 
			cout<<"assignment operator called on itself\n";
		}
		return std::move(*this);
	}
	Text::Text(const Text& rhs)		//copy constructor
	{
//		cout<<"copy constructor rhs.size="<<rhs.numberOfLine<<"\n";
		data=nullptr;
		*this=rhs;
	}
	Text::Text(Text&& rhs)			//move constructor
	{
//		cout<<"move copy constructor rhs.size"<<rhs.numberOfLine<<"\n";
		data=nullptr;
		data=rhs.data;
		numberOfLine=rhs.numberOfLine;
//		*this=std::move(rhs);
	}
	size_t Text::size() const
	{
		return numberOfLine;
	}
	void Text::print()
	{
		cout <<"size="<<numberOfLine<<"   ("<<numberOfLine*sizeof(Text)<<") bytes\n";
	}
	
}
pqu1@matrix:~/oop345/w3> cat w3.cpp Text.h Text.cpp [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cwhoami[Kvi r5.cpp 3[C[C[C[C[Cls[Kcd oop345/w3[K[K[K[K[K[K[K[K[K[K[K[Kg++ -o w3 -std=c++0x s[Kw3.cpp Text.cpp 
pqu1@matrix:~/oop345/w3> w3 gutenberg_shakespeare.txt
Constructor      0.000 seconds - a.size = 0
Constructor      0.110 seconds - b.size = 124457
Copy Assignment  0.010 seconds - a.size = 124457
Move Assignment  0.010 seconds - a.size = 124457
Copy Constructor 0.010 seconds - c.size = 124457
Move Constructor 0.000 seconds - d.size = 124457
Destructor       0.000 seconds
pqu1@matrix:~/oop345/w3> exit
exit

Script done on Mon 08 Feb 2016 11:10:34 PM EST
