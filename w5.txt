Script started on Tue 23 Feb 2016 07:45:02 PM EST
yren27@matrix:~/oop345/w5> whoami
yren27
yren27@matrix:~/oop345/w5> cat w5.cpp Notifications.h Message.h
// Workshop 5 - Containers
 // w5.cpp

 #include <iostream>
 #include <fstream>
 #include "Message.h"
 #include "Notifications.h"

 const char REC_DELIMITER = '\n';

 w5::Notifications collect(std::ifstream& in, char recDelim) {
     w5::Notifications notifications;

     do {
         w5::Message message(in, recDelim);
         if (!message.empty())
             notifications += std::move(message);
     } while(in);

     return notifications;
 }

 int main(int argc, char* argv[]) {
     if (argc == 1) {
         std::cerr << argv[0] << ": missing file operand\n";
         return 1;
     }
     else if (argc != 2) {
         std::cerr << argv[0] << ": too many arguments\n";
         return 2;
     }
     std::ifstream file(argv[1]);
     if (!file) {
         std::cerr << argv[0] << "\n: Failed to open " << argv[1] << "\n"; 
         return 3;
     }

     std::cout << "\nNotifications\n=============\n\n";
     w5::Notifications notifications = collect(file, REC_DELIMITER);

     notifications.display(std::cout);

     std::cout << "Press any key to continue ... ";
     std::cin.get();
 }#pragma once
#include"Message.h"

namespace w5{

	class Notifications{
		static const int MAX_TABLE_SIZE = 10;
		Message* msgTable;
		int count;

	public:
		Notifications() :count(0), msgTable(new Message[MAX_TABLE_SIZE])
		{


		}

		Notifications(const Notifications& rhs)
		{
			msgTable = nullptr;
			*this = rhs;

		}

		Notifications& operator=(const Notifications& rhs)
		{
			if (this != &rhs)
			{
				if (msgTable) delete[] msgTable;

				msgTable = nullptr;
				count = 0;

				if (rhs.msgTable){
					count == rhs.count;
					//msgTable = rhs.msgTable;
					msgTable = new Message[MAX_TABLE_SIZE];
					for (int i = 0; i < count; i++){
						msgTable[i] = rhs.msgTable[i];
					}
				}
			}
			return *this;
		}

		Notifications(Notifications&& rhs)
		{
			msgTable = nullptr;
			*this = std::move(rhs);

		}

		Notifications&& operator=(Notifications&& rhs)
		{
			if (this != &rhs){
				if (msgTable)delete[] msgTable;

				msgTable = nullptr;
				count = 0;

				count == rhs.count;
				msgTable = rhs.msgTable;

				rhs.count = 0;
				rhs.msgTable = 0;
			}
			return std::move(*this);
		
		}

		~Notifications()
		{
			if (msgTable) delete[] msgTable;


		}

		void operator+=(const Message& msg)
		{
			if (count < MAX_TABLE_SIZE){
				msgTable[count] = msg;
				count++;
			}
		}

		void display(std::ostream& os) const
		{

			os << "we have " << count << " tweets\n";

			for (int i = 0; i < count; i++)
			{
				msgTable[i].display(os);
			}
		}

	};

}#pragma once
#include <iostream>
#include <fstream>
#include<string>


namespace w5
{
	class Message {
		std::string name, reply, tweet;

	public:

		Message(){}
		Message(std::ifstream& in, char c)
		{

			std::string line;
			getline(in, line, c);
			if (in.eof())
			{
				//std::cout << "EOF\n";
				return;
			}
			
			auto cr = line.find("\r");
			if (cr != std::string::npos)
			{
				line.erase(line.begin() + cr);
			}
			//std::cout <<"line " <<line << "\n";

			int index = 0;
			while (index < line.size() && line[index] != ' ')
			{
				name += line[index];
				index++;
			}

			//std::cout <<"user "<< name << "\n";

			if (index == line.size())
				return;
			index++; //skip sapce

			if (index < line.size() && line[index] == '@')
			{
				index++;//skip@
				while (index < line.size() && line[index] != ' ')
				{
					reply += line[index];
					index++;
				}
				//std::cout << "reply: "<<reply << "\n";
				if (index == line.size())
					return;
				index++; //skip space

			}
			
			while (index < line.size())
			{
				tweet += line[index];
				index++;
			}
			//std::cout <<"tweet: "<< tweet << "\n";
		}


		bool empty() const
		{
		
			return tweet.empty();
		
		}


		void display(std::ostream& os) const
		{
			    os << "Message" << "\n";
				os << "User:" << name << "\n";
				if (!reply.empty())
				os << "Reply:" << reply << "\n";

				os << "Tweet:" << tweet << "\n";
				os << "\n";
			
		}


	};



}
yren27@matrix:~/oop345/w5> g++ -o w5 -std=c++0x w5.cpp
yren27@matrix:~/oop345/w5> w5 w5_test.dat

Notifications
=============

we have 4 tweets
Message
User:jim
Tweet:Workshop 5 is cool

Message
User:harry
Reply:jim
Tweet:working on workshop 5 now

Message
User:dave
Tweet:what the ^#$%!

Message
User:john
Reply:harry
Tweet:I'm done

Press any key to continue ... exit
yren27@matrix:~/oop345/w5> exit
exit

Script done on Tue 23 Feb 2016 07:46:50 PM EST
